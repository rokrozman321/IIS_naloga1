# name: Pytests

# on:
#   - push

# jobs:
#   test: 
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.9"]

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version}}
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Install dependencies
#       run: |
#           python -m pip install --upgrade pip
#           pip install pytest
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       - name: Test with pytest
#         run: pytest

# name: Python package

# on: [push]

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.9"]

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Install poetry
#         run: |
#           python -m pip install --upgrade pip
#           pip install pytest poetry
#       - name: Install dependencies
#         run: |
#           poetry install
#       - name: Install 2
#         run: |
#           poetry install --no-interaction --no-root
#       - name: Test with pytest
#         run: |
#           pytest

# name: Build and Test

# on:
#   push:
#     branches: [ main ]
#   pull_request:

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Python 3.9
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'

#       - name: Install Poetry
#         run: |
#           python -m pip install --upgrade pip
#           pip install pytest poetry
#           poetry show
#           source $HOME/.poetry/env

#       - name: Install dependencies
#         run: poetry install

#       - name: Run tests
#         run: pytest

# name: Test

# on:
#   push:
#     branches: [ main ]
#   pull_request:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Set up Python 3.9
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'

#       - name: Install and configure Poetry
#         uses: snok/install-poetry@v1
#         with:
#           version: 1.3.2

#       - name: Install dependencies
#         run: poetry install

#       - name: Activate virtual environment
#         run: source $HOME/.poetry/bin/activate

#       - name: Run tests
#         run: pytest

name: Testing default

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest 